type Query {
  users: AllUserResponse!
  user(userId: ID!): UserResponse!
  post(postId: ID!): PostResponse!
  postForUser(page: Int!): AllPostResponse!
  getMessageRoom(roomId: ID!): MessageRoomReponse!
}

type Mutation {
  #authMutation
  register(registerInput: registerInput!): UserResponse!
  login(loginInput: loginInput!): AuthResponse!
  logout: MsgResponse!

  #userMutation
  updateUser(userInput: registerInput!): UserResponse!
  changePassword(oldPassword: String!, newPassword: String!): UserResponse!
  addFriend(friendId: ID!): UserResponse!
  confirmFriend(friendId: ID!): UserResponse!
  unFriend(friendId: ID!): UserResponse!

  #postMutation
  createPost(postInput: postInput!): PostResponse!
  updatePost(postId: ID!, postInput: postInput!): PostResponse!
  deletePost(postId: ID!): PostResponse!
  handleLikePost(postId: ID!): PostResponse!

  #commentMutation
  createComment(postId: ID!, commentInput: commentInput!): CommentResponse!
  updateComment(commentId: ID!, commentInput: commentInput!): CommentResponse!
  deleteComment(commentId: ID!): CommentResponse!
  handleLikeComment(commentId: ID!): CommentResponse!
  createReplies(commentId: ID!, repliesInput: commentInput!): CommentResponse!
  updateReplies(
    commentId: ID!
    repliesId: ID!
    repliesInput: commentInput!
  ): CommentResponse!
  handleLikeReplies(commentId: ID!, repliesId: ID!): CommentResponse!
  deleteReplies(commentId: ID!, repliesId: ID!): CommentResponse!

  #messageMutation
  createMessage(roomId: ID!, content: String!): MessageReponse!
  createMessageRoom(users: [ID!]!): MessageRoomReponse!
  deleteMessageRoom(roomId: ID!): MessageRoomReponse!
  leaveMessageRoom(roomId: ID!): MessageRoomReponse!
}

type Subscription {
  messageCreated: MessageReponse!
}

scalar Date

#input type
input registerInput {
  name: String
  password: String
  email: String
  ava: String
  dob: Date
  phone: String
  address: String
}

input loginInput {
  email: String
  password: String
}

input postInput {
  content: String
  media: [String]
  vision: String
}

input commentInput {
  content: String
  media: [String]
}

#union type
union AuthResponse = Auth | MsgResponse
union UserResponse = User | MsgResponse
union AllUserResponse = AllUser | MsgResponse
union PostResponse = Post | MsgResponse
union AllPostResponse = AllPost | MsgResponse
union CommentResponse = Comment | MsgResponse
union MessageRoomReponse = MessageRoom | MsgResponse
union MessageReponse = Message | MsgResponse

#basic type
type MsgResponse {
  code: String!
  message: String!
}

type Auth {
  user: User!
  token: String!
  refreshToken: String!
}

type AllUser {
  totalUser: Int!
  users: [User]!
}

type AllPost {
  posts: [Post]!
}

type User {
  id: ID!
  name: String!
  email: String!
  ava: String
  phone: String
  address: String
  dob: Date
  createdAt: Date!
  updatedAt: Date!
  friendConfirm: [Friend]
  friendList: [Friend]
  postsOfUser: [Post]
  messageRoomOfUser: [MessageRoom]
}

type Message {
  user: User!
  content: String!
  createdAt: Date!
}

type MessageRoom {
  id: ID!
  users: [User]!
  message: [Message]!
}

type Friend {
  _id: ID!
  name: String!
  ava: String
  status: String!
}

type Post {
  id: ID!
  creator: User!
  content: String
  media: [String]
  totalLike: Int!
  userLike: [User]!
  vision: String!
  totalComment: Int!
  commentList: [Comment]
  createdAt: Date!
}

type Replies {
  id: ID!
  creator: User!
  content: String!
  media: [String]
  createdAt: Date!
  totalLike: Int!
  userLike: [User]!
}

type Comment {
  id: ID!
  creator: User!
  content: String!
  media: [String]
  createdAt: Date!
  totalLike: Int!
  userLike: [User]!
  replies: [Replies]
}
