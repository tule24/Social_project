type Query {
  users: AllUserResponse!
  user(userId: ID!): UserResponse!
  # postsForUser: [Post]!
  # postsOfUser: [Post]!
}

type Mutation {
  register(registerInput: registerInput!): UserResponse!
  login(loginInput: loginInput!): AuthResponse!
  logout: MessageResponse!
  updateUser(userInput: registerInput!): UserResponse!
  changePassword(oldPassword: String!, newPassword: String!): MessageResponse!
  addFriend(friendId: ID!): MessageResponse!
  confirmFriend(friendId: ID!): MessageResponse!
  unFriend(friendId: ID!): MessageResponse!
  # createPost(postInput: postInput!): PostResponse!
  # updatePost(postId: ID!, postInput: postInput!): PostResponse!
  # handleLikePost(postId: ID!): BaseResponse!
  # deletePost(postId: ID!): PostResponse!
  # createComment(commentInput: commentInput!): CommentResponse!
}

scalar Date

input registerInput {
  name: String
  password: String
  email: String
  ava: String
  phone: String
  address: String
}

input loginInput {
  email: String
  password: String
}

input postInput {
  content: String
  media: [String]
  vision: String
}

# input commentInput {
#   postId: ID
#   content: String
#   media: [String]
# }

union AuthResponse = Auth | MessageResponse
union UserResponse = User | MessageResponse
union AllUserResponse = AllUser | MessageResponse

type MessageResponse {
  code: String!
  message: String!
}

type AllUser {
  totalUser: Int!
  users: [User]!
}

# type CommentResponse implements Response {
#   code: String!
#   success: Boolean!
#   message: String!
#   comment: Comment
# }

type Auth {
  user: User!
  token: String!
  refreshToken: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  ava: String
  phone: String
  address: String
  createdAt: Date!
  updatedAt: Date!
  friendList: [Friend]
  posts: [Post]
}

type Friend {
  _id: ID!
  name: String!
  email: String!
  ava: String
  status: String!
}

type BaseComment {
  user: User!
  content: String!
  media: [String]
  createdAt: Date!
  userLike: [User]!
}

type Comment {
  id: ID!
  user: User!
  content: String!
  media: [String]
  createdAt: Date!
  userLike: [User]!
  childComments: [BaseComment]
}

type Post {
  id: ID!
  creator: User!
  content: String
  media: [String]
  userLike: [User]!
  vision: String!
  totalComment: Int!
  comments: [Comment]
  createdAt: Date!
}
