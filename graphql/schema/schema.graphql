type Query {
  users: [User]!
  user(userId: ID): User!
  friendOfUser: [Friend]!
  post(postId: ID!): Post!
  postOfUser(page: Int!, userId: ID): [Post]!
  postForUser(page: Int!): [Post]!
  commentOfPost(postId: ID!, page: Int!): [Comment]!
  repliesOfComment(commentId: ID!, page: Int!): [Replies]!
  getMessageRoom(roomId: ID!): MessageRoom!
}

type Mutation {
  #authMutation
  register(registerInput: registerInput!): User!
  login(loginInput: loginInput!): Auth!
  logout: String!
  refreshToken(refreshToken: String!): Auth!

  #userMutation
  updateUser(userInput: registerInput!): User!
  changePassword(oldPassword: String!, newPassword: String!): User!
  addFriend(friendId: ID!): Friend!
  confirmFriend(friendId: ID!): Friend!
  unFriend(friendId: ID!): Friend!

  #postMutation
  createPost(postInput: postInput!): Post!
  updatePost(postId: ID!, postInput: postInput!): Post!
  deletePost(postId: ID!): Post!
  likePost(postId: ID!): Post!
  unlikePost(postId: ID!): Post!

  #commentMutation
  createComment(postId: ID!, content: String!): Comment!
  updateComment(commentId: ID!, content: String!): Comment!
  deleteComment(commentId: ID!): Comment!
  likeComment(commentId: ID!): Comment!
  unlikeComment(commentId: ID!): Comment!
  createReplies(commentId: ID!, content: String!): Replies!
  updateReplies(commentId: ID!, repliesId: ID!, content: String!): Replies!
  likeReplies(commentId: ID!, repliesId: ID!): Replies!
  unlikeReplies(commentId: ID!, repliesId: ID!): Replies!
  deleteReplies(commentId: ID!, repliesId: ID!): Replies!

  #messageMutation
  createMessage(roomId: ID!, content: String!): Message!
  createMessageRoom(users: [ID!]!): MessageRoom!
  deleteMessageRoom(roomId: ID!): MessageRoom!
  leaveMessageRoom(roomId: ID!): MessageRoom!
}

type Subscription {
  messageCreated: Message!
}

scalar Date

#input type
input registerInput {
  name: String
  password: String
  email: String
  ava: String
  dob: Date
  phone: String
  address: String
}

input loginInput {
  email: String
  password: String
}

input postInput {
  content: String
  media: [String]
  vision: String
}

#basic type
type Auth {
  user: User!
  token: String!
  refreshToken: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  ava: String
  phone: String
  address: String
  dob: Date
  createdAt: Date!
  updatedAt: Date!
  messageRoomOfUser: [MessageRoom]
}
type Friend {
  id: ID!
  name: String!
  ava: String
  status: String!
}

type MessageChild {
  message: String!
  createdAt: Date!
}
type Message {
  id: ID!
  roomId: ID!
  creator: User!
  content: [MessageChild]!
}
type LastMessage {
  creatorId: ID
  content: String
}
type MessageRoom {
  id: ID!
  users: [User]!
  messages: [Message]!
  lastMessage: LastMessage
  updatedAt: Date!
}

type Post {
  id: ID!
  creator: User!
  content: String
  media: [String]
  totalLike: Int!
  userLike: [User]!
  liked: Boolean!
  vision: String!
  totalComment: Int!
  createdAt: Date!
  updatedAt: Date!
}

type Comment {
  id: ID!
  creator: User!
  content: String!
  createdAt: Date!
  totalLike: Int!
  userLike: [User]!
  liked: Boolean!
  totalReplies: Int!
}

type Replies {
  id: ID!
  creator: User!
  content: String!
  createdAt: Date!
  totalLike: Int!
  liked: Boolean!
  userLike: [User]!
}
